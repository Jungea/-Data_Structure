[course12] 방향그래프의 진입차수

----------------------------------------------------------
아래 첨부한 코드는 directed graph를 표현하는 클래스를 정의하고 이를 이용하는 프로그램이다.

단계1: DirectedMatrixGraph의 inDegree 메소드를 완성하시오. **** (1) 부분
       inDegree 계산 효율을 높이기 위해 별도의 인스턴스 변수를 두지 말 것
       이 경우 수행시간 복잡도는?

단계2: DirectedListGraph의 inDegree 메소드를 완성하시오. **** (2) 부분
       inDegree 계산 효율을 높이기 위해 별도의 인스턴스 변수를 두지 말 것
       이 경우 수행시간 복잡도는?

단계3: 각 정점의 진입차수를 구하는 일이 빈번한 응용에 DirectedListGraph를 이용하고자 한다.
       이를 위해, 진입차수 계산을 O(1) 시간에 할 수 있도록 DirectedListGraph를 수정하시오.


- 실행 예:
course12 : 홍길동
정점 수 입력: 5
간선 수 입력: 6
6개의 간선을 입력하세요(각 간선은 정점 번호 2개를 whitespace로 구분하여 입력):
0 1   0 2   0 3   2 1  3 1  4 2
graph1
정점 0의 진입차수 = 0
정점 1의 진입차수 = 3
정점 2의 진입차수 = 2
정점 3의 진입차수 = 1
정점 4의 진입차수 = 0
graph2
정점 0의 진입차수 = 0
정점 1의 진입차수 = 3
정점 2의 진입차수 = 2
정점 3의 진입차수 = 1
정점 4의 진입차수 = 0

----------------------------------------------------------
목적
- directed graph 구현을 연습한다.

----------------------------------------------------------
유의사항
- 적절한 comment
//***************************
// 파일명: ... .java
// 작성자: ...
// 작성일: ...
// 프로그램 설명:...
//***************************

- 들여쓰기
- 식별자 이름을 자바 관례에 맞게 적절히 붙일 것
- command-line에서 java -jar 과제코드.jar 로 채점합니다.
철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제명과 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출 
- 과제코드.jar 파일
- .java 파일들


/*
 * 파일명: DirectedGraphTest.java
 * 작성일: 2018.12.3
 * 작성자: 홍길동
 * 설명: 방향 그래프를 생성하고 이용하는 프로그램
 */

import java.util.Scanner;

public class DirectedGraphTest {
 public static void main(String[] args) {
  System.out.println("course12 : 홍길동");

  // 정점 수 n 입력
  Scanner scan = new Scanner(System.in);
  System.out.print("정점 수 입력: ");
  int n = scan.nextInt();

  // 정점 수가 n인 방향 그래프 graph1과 graph2를 생성
  DirectedMatrixGraph graph1 = new DirectedMatrixGraph(n);
  DirectedListGraph graph2 = new DirectedListGraph(n);

  // 간선 수 e 입력
  System.out.print("간선 수 입력: ");
  int e = scan.nextInt();

  // e개의 간선(정점 쌍)을 입력받아 graph1과 graph2에 삽입
  System.out.println(e + "개의 간선을 입력하세요(각 간선은 정점 번호 2개를 whitespace로 구분하여 입력):");
  for(int i = 0; i < e; i++) {
   int v1 = scan.nextInt();
   int v2 = scan.nextInt();
   graph1.addEdge(v1, v2);
   graph2.addEdge(v1, v2);
  }

  // graph1 각 정점의 in-degree를 출력
  System.out.println("graph1");
  for(int i = 0; i < n; i++) {
   System.out.println("정점 " + i + "의 진입차수 = " + graph1.inDegree(i));  
  }
  
  // graph2 각 정점의 in-degree를 출력
  System.out.println("graph2");
  for(int i = 0; i < n; i++) {
   System.out.println("정점 " + i + "의 진입차수 = " + graph2.inDegree(i));  
  }
 }
}

 

/*
 * 파일명: DirectedMatrixGraph.java
 * 작성일: 2018.12.3
 * 작성자: 홍길동
 * 설명: 인접행렬을 이용하여 방향 그래프를 구현한 클래스
 */

class DirectedMatrixGraph {
 private int[][] matrix;  // 인접 행렬
 private int n;    // 정점 수

 // 정점 0, 1, 2, ..., n-1 인 그래프를 생성
 public DirectedMatrixGraph(int n) {
  matrix = new int[n][n];
  this.n = n;
 }

 // 정점 v의 진입차수를 구하여 리턴하는 메소드 ************* (1)
 public int inDegree(int v) {

 

 

  return 0;    // 메소드 완성 후 삭제할 것
 }

 // 간선 (v1, v2) 존재 여부를 검사 - 정점 번호가 잘못된 경우는 예외 발생
 public boolean hasEdge(int v1, int v2) {
  return matrix[v1][v2] == 1;
 }

 // 간선 (v1, v2) 를 삽입
 public void addEdge(int v1, int v2) {
  if(!isValid(v1) || !isValid(v2)) {
   System.out.println("간선 삽입 오류 - 잘못된 정점 번호입니다. <" + v1 + ", " + v2 + ">");
  }
  else if(hasEdge(v1, v2)) {
   System.out.println("간선 삽입 오류 - 이미 존재하는 간선입니다. <" + v1 + ", " + v2 + ">");
  }
  else {
   matrix[v1][v2] = 1;
  }
 }

 // 정점 번호의 유효성을 검사
 private boolean isValid(int v) {
  return v >= 0 && v < n;
 }
}


/*
 * 파일명: DirectedListGraph.java
 * 작성일: 2018.12.3
 * 작성자: 홍길동
 * 설명: 인접리스트를 이용하여 방향 그래프를 구현한 클래스
 */

class DirectedListGraph {
 private class Node {
  int vertex;
  Node link;
  Node(int vertex) {
   this.vertex = vertex;
  }
 }
 private Node[] list; // 인접 리스트
 private int n;   // 정점 수

 // 정점 0, 1, 2, ..., n-1 인 그래프를 생성
 public DirectedListGraph(int n) {
  list = new Node[n];
  this.n = n;
 }

 // 정점 v의 진입차수를 구하여 리턴하는 메소드 ************* (2)
 public int inDegree(int v) {

 

 

  return 0;    // 메소드 완성 후 삭제할 것
 }


 // 간선 (v1, v2) 존재 여부를 검사 - 정점 번호가 잘못된 경우는 예외 발생
 public boolean hasEdge(int v1, int v2) {
  Node p = list[v1];
  while(p != null) {
   if(p.vertex == v2)
    return true;
   p = p.link;
  }

  return false;
 }

 // 간선 (v1, v2)를 삽입
 public void addEdge(int v1, int v2) {
  if(!isValid(v1) || !isValid(v2)) {
   System.out.println("간선 삽입 오류 - 잘못된 정점 번호입니다. (" + v1 + ", " + v2 + ")");
  }
  else if(hasEdge(v1, v2)) {
   System.out.println("간선 삽입 오류 - 이미 존재하는 간선입니다. (" + v1 + ", " + v2 + ")");
  }
  else {
   Node newNode = new Node(v2);
   newNode.link = list[v1];
   list[v1] = newNode;
  }
 }

 // 정점 번호의 유효성을 검사
 private boolean isValid(int v) {
  return v >= 0 && v < n;
 }
}