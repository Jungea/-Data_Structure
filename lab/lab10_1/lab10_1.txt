[lab10_1] 인접행렬을 이용한 방향그래프 구현

각 메소드의 복잡도 확인하세요. 복잡도 잘못된 메소드는 0점입니다.

hasEdge O(1)

addEdge O(1)

printAdjacentVertices O(n)

----------------------------------------------------------
directed graph를 표현하는 추상자료형인 DirectedMatrixGraph 클래스를 정의하고 이를 이용하는 프로그램을 작성하시오.

- DirectedMatrixGraph 클래스

adjacency matrix로 방향 그래프를 구현하는 클래스임

private 인스턴스 변수:
   구현에 필요한 변수들을 선언

public 메소드:
   생성자 : 정점수 n을 매개변수로 받아 정점은 n개이고 간선은 없는 초기 그래프를 생성
            이 때, 정점수 n의 크기를 제한하면 안됨(예를 들어 n이 100 이하만 작동하게 하면 안됨)
   hasEdge : 간선을 이루는 두개의 정점 v1, v2를 매개변수로 받아 이 간선 존재 여부를 리턴
   addEdge : 간선을 이루는 두개의 정점 v1, v2를 매개변수로 받아 그래프에 간선을 추가
 ** 잘못된 정점 번호인 경우 삽입하지 않고 오류 메시지 출력
        ** 이미 존재하는 간선인 경우(hasEdge 호출) 삽입하지 않고 오류 메시지 출력    
   printAdjacentVertices : 정점을 매개변수로 받아 그 정점에 인접한 정점들을 모두 출력
 잘못된 정점 번호인 경우 오류 메시지 출력


- DirectedMatrixGraphTest 클래스의 main 메소드는 다음을 수행한다.(아래 첨부한 코드를 그대로 이용)

(1) 사용자로부터 정점 수 n를 입력받아 다음과 같은 방향 그래프 G=(V, E)를 생성
    V = {0, 1, 2, ..., n-1}
    E = {}

(2) 사용자로부터 간선 수 e를 입력받음

(3) 사용자로부터 e개의 정점 쌍(v1, v2)를 입력받아 그래프에 삽입
    간선 삽입 오류 발생은 무시하면 됨. 예를 들어 7개의 간선 삽입 과정에서 2개가 오류이면 5개만 삽입하면 됨

(4) 각 정점에 인접한 정점들을 출력


- 실행 예:
lab10_1 : 홍길동

정점 수 입력: 5

간선 수 입력: 7

7개의 간선 입력(각 간선은 정점 번호 2개를 whitespace로 구분하여 입력):
0 1   1 2   1 3   4 2   1 3   3 5   0 4
간선 삽입 오류 - 이미 존재하는 간선입니다. <1, 3>
간선 삽입 오류 - 잘못된 정점 번호입니다. <3, 5>

정점 0에 인접한 정점 = 1 4
정점 1에 인접한 정점 = 2 3
정점 2에 인접한 정점 =
정점 3에 인접한 정점 =
정점 4에 인접한 정점 = 2


----------------------------------------------------------
목적
- adjacency matrix를 이용한 directed graph 구현을 연습한다.

----------------------------------------------------------
유의사항
- 적절한 comment
//***************************
// 파일명: ... .java
// 작성자: ...
// 작성일: ...
// 프로그램 설명:...
//***************************

- 들여쓰기
- 식별자 이름을 자바 관례에 맞게 적절히 붙일 것
- command-line에서 java -jar 과제코드.jar 로 채점합니다.
철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제명과 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출 
- 과제코드.jar 파일
- .java 파일들

 


// 방향 그래프를 생성하고 이용하는 프로그램

import java.util.Scanner;

public class DirectedMatrixGraphTest {
 public static void main(String[] args) {
  System.out.println("lab10_1 : 홍길동");

  // 정점 수 n 입력
  Scanner scan = new Scanner(System.in);
  System.out.print("정점 수 입력: ");
  int n = scan.nextInt();

  // 정점 수가 n인 방향 그래프를 생성
  DirectedMatrixGraph graph = new DirectedMatrixGraph(n);

  // 간선 수 e 입력
  System.out.print("간선 수 입력: ");
  int e = scan.nextInt();

  // e개의 간선(정점 쌍)을 입력받아 그래프에 삽입
  System.out.println(e + "개의 간선을 입력하세요(각 간선은 정점 번호 2개를 whitespace로 구분하여 입력):");
  for(int i = 0; i < e; i++) {
   int v1 = scan.nextInt();
   int v2 = scan.nextInt();
   graph.addEdge(v1, v2);
  }

  // 각 정점의 인접 정점들을 출력
  System.out.println();
  for(int i = 0; i < n; i++) {
   System.out.print("정점 " + i + "에 인접한 정점 = ");
   graph.printAdjacentVertices(i);
  }
 }
}