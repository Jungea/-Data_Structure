[hw9_1] 이진탐색트리

----------------------------------------------------------
첨부한 코드는 int형 키값을 갖는 binary search tree를 연결자료구조로 구현하고 이용하는 프로그램이다.
MyBinarySearchTree 클래스를 완성하시오.

- MyBinarySearchTreeTest - 수정하지 말 것

- MyBinarySearchTree - 완성할 것

** 삽입 메소드는 두가지 입니다.
   insert 메소드(코드 제공)는 재귀 알고리즘이므로, add 메소드는 반복 알고리즘을 이용해야 합니다.

** 중위순회 외의 연산은 수행시간이 O(h) 이어야 함(h는 트리의 높이)

** 메뉴 6의 remove 메소드는 구현하지 않아도 됩니다. (구현시 보너스 점수 2점 부여)

----------------------------------------------------------
목적
- 이진탐색트리 구현을 연습한다.

----------------------------------------------------------
유의사항
- 적절한 comment
//***************************
// 파일명: ... .java
// 작성자: ...
// 작성일: ...
// 프로그램 설명:...
//***************************

- 들여쓰기
- 식별자 이름을 자바 관례에 맞게 적절히 붙일 것
- command-line에서 java -jar 과제코드.jar 로 채점합니다.
철자도 똑같게 이 명령이 제대로 실행되어야 합니다.
- 과제명과 본인의 이름을 맨 처음 출력

----------------------------------------------------------
제출 
- 과제코드.jar 파일
- .java 파일들


/*
 * 파일명: MyBinaryTreeTest.java
 * 작성일: 2018.11.13
 * 작성자: 홍길동
 * 설명: int형 키값을 저장하는 이진탐색트리를 생성하고 연산을 수행하는 프로그램
 */

import java.util.NoSuchElementException;
import java.util.Scanner;

public class MyBinarySearchTreeTest {
 public static void main(String[] args) {
  System.out.println("hw9_1 : 홍길동");

  // 공백 이진탐색트리 tree를 생성
  MyBinarySearchTree tree = new MyBinarySearchTree();

  Scanner scan = new Scanner(System.in);
  System.out.println("메뉴 번호를 입력하세요.");
  int menu = 0;
  int item = 0;

  // 종료를 선택할 때까지 반복하여 메뉴를 제공하고 그에 맞는 이진탐색트리 연산을 수행
  do {
   System.out.print("1:재귀삽입  2:중위순회  3:최대값  4:검색  5:삽입  7:종료 --->");

//   System.out.print("1:재귀삽입  2:중위순회  3:최대값  4:검색  5:삽입  6:삭제  7:종료 --->");  // 보너스 과제를 수행한 경우 이용하세요.

   menu = scan.nextInt();
   switch(menu) {
   case 1:
    System.out.println("재귀 알고리즘을 이용한 삽입을 수행합니다.");
    System.out.print("삽입할 정수 입력:");  
    item = scan.nextInt(); 
    tree.insert(item);
    break;    
   case 2:
    System.out.println("중위순회 출력을 수행합니다.");
    tree.printInorder();  
    break;
   case 3:
    System.out.println("최대값 조회를 수행합니다.");
    try {
     System.out.println(tree.max());   
    } catch(NoSuchElementException e) {
     System.out.println("최대값 조회 실패");
    }
    break;
   case 4:
    System.out.println("검색을 수행합니다.");
    System.out.print("검색할 정수 입력:");
    item = scan.nextInt();
    if(tree.contains(item))    
     System.out.println("검색 성공");
    else
     System.out.println("검색 실패");
    break;
   case 5:
    System.out.println("반복 알고리즘을 이용한 삽입을 수행합니다.");
    System.out.print("삽입할 정수 입력:");
    item = scan.nextInt();
    if(tree.add(item))    
     System.out.println("삽입 성공");  
    else
     System.out.println("삽입 실패");
    break;
//   case 6:
//    System.out.println("삭제를 수행합니다.");
//    System.out.print("삭제할 정수 입력:");
//    item = scan.nextInt();
//    if(tree.remove(item))    
//     System.out.println("삭제 성공");
//    else
//     System.out.println("삭제 실패");
//    break;
   case 7:
    System.out.println("종료합니다.");
    break;
   default:
    System.out.println("메뉴 번호 오류: 메뉴를 다시 선택하세요.");
   }
  } while(menu != 7);
 }
}

 

 


/*
 * 파일명: MyBinarySearchTree.java
 * 작성일: 2018.11.13
 * 작성자: 홍길동
 * 설명: int형 키값 저장하는 이진탐색트리를 연결자료구조로 구현한 클래스
 */

import java.util.NoSuchElementException;

public class MyBinarySearchTree {
 // (1) 트리의 노드를 표현하는 private 클래스 Node - 필드(int형 key, leftChild, rightChild), 생성자(key값을 매개변수로 받아 초기화)

 

 


 
 // (2) private 인스턴스 변수 트리의 루트 노드를 가킬 변수(root)를 선언하고 null로 초기화

 

 

 

 // 트리에 키값 key를 삽입하는 메소드
 public void insert(int key) {
  root = insertKey(root, key);
 }

 // p를 루트로 하는 트리에 키값 key를 삽입하고, 삽입 후 루트를 리턴하는 메소드(재귀 알고리즘)
 private Node insertKey(Node p, int key) {
  if(p == null) {  
   Node newNode = new Node(key);
   return newNode; 
  }
  else if(key < p.key) {
   p.leftChild = insertKey(p.leftChild, key);
   return p;  // 루트 불변
  }
  else if(key > p.key) {
   p.rightChild = insertKey(p.rightChild, key);
   return p;  // 루트 불변       
  }
  else {  // key = p.key 인 경우 삽입 실패
   System.out.println("삽입 실패. 중복된 키값이 존재합니다: " + key);
   return p;   // 루트 불변
  }
 }  

 // 트리를 중위순회하며 출력하는 메소드
 public void printInorder() {
  inorder(root);
  System.out.println();
 }

 // (3) p를 루트로 하는 트리를 중위 순회하며 키값을 출력하는 메소드(재귀 알고리즘)
 private void inorder(Node p) {

 

 

 

 }
 
 // (4) 트리의 최대 키값을 리턴하는 메소드(반복 알고리즘) - 공백 트리인 경우 NoSuchElementException 예외 발생
 public int max() {
  if(root == null) {
   throw new NoSuchElementException();
  }

 

 

 


  return 0;  // 임시로 추가한 문장임
 }
 
 // 트리가 키값 key를 포함하는지 여부를 리턴하는 메소드
 public boolean contains(int key) {
  return search(root, key);
 }
 
 // (5) p를 루트로 하는 트리에 키값 key가 존재하는지 여부를 리턴하는 메소드(재귀 알고리즘)
 private boolean search(Node p, int key) {

 

 


  return false;  // 임시로 추가한 문장임

 }
 
 // (6) 트리에 키값 key를 삽입하는 메소드(반복 알고리즘) - 삽입 성공여부(true/false)를 리턴
 public boolean add(int key) {

 

 

  return false;  // 임시로 추가한 문장임
 }
}